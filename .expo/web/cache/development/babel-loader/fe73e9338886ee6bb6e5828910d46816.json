{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { TextInput } from 'react-native-gesture-handler';\nimport ButtonBack from \"../../components/ButtonBack\";\nimport COLORS from \"../../styles/colors\";\nimport ButtonNext from \"../../components/ButtonNext\";\nimport { validatePassword } from \"../../../infrastructures/utils/strings\";\nimport { commonStyles } from \"../../styles/common\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar icPasswordVisibleTrue = require(\"../../../assets/ic-password-visible-true.png\");\n\nvar icPasswordVisibleFalse = require(\"../../../assets/ic-password-visible-false.png\");\n\nvar styles = StyleSheet.create({\n  textInput: {\n    paddingVertical: 16,\n    paddingHorizontal: 20,\n    borderRadius: 5,\n    backgroundColor: COLORS.GREY_030,\n    marginBottom: 12,\n    fontSize: 16,\n    borderColor: 'transparent'\n  },\n  eyeIconContainer: {\n    position: 'absolute',\n    right: 15,\n    top: 15\n  },\n  hintText: {\n    color: COLORS.THEME_PRIMARY,\n    fontFamily: 'Pretendard',\n    fontSize: 12,\n    paddingLeft: 12\n  },\n  errorText: {\n    color: COLORS.THEME_NEGATIVE,\n    fontFamily: 'Pretendard',\n    fontSize: 12,\n    paddingLeft: 12\n  },\n  eyeIcon: {\n    height: 24,\n    width: 24\n  }\n});\n\nfunction PasswordInputScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password2 = _useState4[0],\n      setPassword2 = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isPasswordValidate = _useState6[0],\n      setIsPasswordValidate = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isPasswordSame = _useState8[0],\n      setIsPasswordSame = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isPasswordVisible = _useState10[0],\n      setIsPasswordVisible = _useState10[1];\n\n  var _useState11 = useState(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isPassword2Visible = _useState12[0],\n      setIsPassword2Visible = _useState12[1];\n\n  useEffect(function () {\n    setIsPasswordValidate(validatePassword(password));\n  }, [password]);\n  useEffect(function () {\n    setIsPasswordSame(password === password2 && password !== '');\n  }, [password2, password]);\n  return _jsxs(SafeAreaView, {\n    style: commonStyles.container,\n    children: [_jsx(ButtonBack, {\n      onPress: function onPress() {\n        return navigation.goBack();\n      }\n    }), _jsx(View, {\n      style: commonStyles.titleWrapper,\n      children: _jsx(Text, {\n        style: commonStyles.title,\n        children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uC124\\uC815\\uD558\\uC138\\uC694\"\n      })\n    }), _jsxs(View, {\n      children: [_jsx(TextInput, {\n        value: password,\n        onChangeText: function onChangeText(text) {\n          return setPassword(text);\n        },\n        style: styles.textInput,\n        placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uC124\\uC815\",\n        secureTextEntry: isPasswordVisible,\n        placeholderTextColor: COLORS.TEXT_DISABLED_GREY,\n        keyboardType: \"default\",\n        autoFocus: true\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return setIsPasswordVisible(function (prev) {\n            return !prev;\n          });\n        },\n        style: styles.eyeIconContainer,\n        children: _jsx(Image, {\n          source: isPasswordVisible ? icPasswordVisibleFalse : icPasswordVisibleTrue,\n          style: styles.eyeIcon\n        })\n      })]\n    }), _jsxs(View, {\n      children: [_jsx(TextInput, {\n        value: password2,\n        onChangeText: function onChangeText(text) {\n          return setPassword2(text);\n        },\n        style: styles.textInput,\n        placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uB2E4\\uC2DC \\uC785\\uB825\",\n        secureTextEntry: isPassword2Visible,\n        placeholderTextColor: COLORS.TEXT_DISABLED_GREY,\n        keyboardType: \"default\"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return setIsPassword2Visible(function (prev) {\n            return !prev;\n          });\n        },\n        style: styles.eyeIconContainer,\n        children: _jsx(Image, {\n          source: isPassword2Visible ? icPasswordVisibleFalse : icPasswordVisibleTrue,\n          style: styles.eyeIcon\n        })\n      })]\n    }), isPasswordSame || password2.length === 0 ? _jsx(Text, {\n      style: styles.hintText,\n      children: \"\\uC601\\uBB38 \\uB300\\uBB38\\uC790/\\uC18C\\uBB38\\uC790/\\uC22B\\uC790 3\\uAC00\\uC9C0\\uB97C \\uD3EC\\uD568\\uD558\\uC5EC \\uC785\\uB825\\uD558\\uC138\\uC694\"\n    }) : _jsx(Text, {\n      style: styles.errorText,\n      children: \"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC544\\uC694. \\uB2E4\\uC2DC \\uC785\\uB825\\uD558\\uC138\\uC694.\"\n    }), _jsx(View, {\n      style: {\n        marginTop: 22\n      },\n      children: _jsx(ButtonNext, {\n        onPress: function onPress() {\n          return navigation.navigate('NicknameInput');\n        },\n        isActivated: isPasswordValidate && isPasswordSame\n      })\n    })]\n  });\n}\n\nexport default PasswordInputScreen;","map":{"version":3,"sources":["C:/Users/lnr99/Documents/WhaleDone-Client/presentation/screens/Signup/PasswordInput.tsx"],"names":["React","useEffect","useState","SafeAreaView","TextInput","ButtonBack","COLORS","ButtonNext","validatePassword","commonStyles","icPasswordVisibleTrue","require","icPasswordVisibleFalse","styles","StyleSheet","create","textInput","paddingVertical","paddingHorizontal","borderRadius","backgroundColor","GREY_030","marginBottom","fontSize","borderColor","eyeIconContainer","position","right","top","hintText","color","THEME_PRIMARY","fontFamily","paddingLeft","errorText","THEME_NEGATIVE","eyeIcon","height","width","PasswordInputScreen","navigation","password","setPassword","password2","setPassword2","isPasswordValidate","setIsPasswordValidate","isPasswordSame","setIsPasswordSame","isPasswordVisible","setIsPasswordVisible","isPassword2Visible","setIsPassword2Visible","container","goBack","titleWrapper","title","text","TEXT_DISABLED_GREY","prev","length","marginTop","navigate"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { Text, StyleSheet, View, Image, TouchableOpacity } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { TextInput } from 'react-native-gesture-handler';\nimport ButtonBack from '../../components/ButtonBack';\nimport { NavigationStackParams } from '../../../infrastructures/types/NavigationStackParams';\nimport COLORS from '../../styles/colors';\nimport ButtonNext from '../../components/ButtonNext';\nimport { validatePassword } from '../../../infrastructures/utils/strings';\nimport { commonStyles } from '../../styles/common';\n\nconst icPasswordVisibleTrue = require('../../../assets/ic-password-visible-true.png');\nconst icPasswordVisibleFalse = require('../../../assets/ic-password-visible-false.png');\n\ntype PasswordInputScreenProp = NativeStackScreenProps<\n  NavigationStackParams,\n  'PasswordInput'\n>;\n\nconst styles = StyleSheet.create({\n  textInput: {\n    paddingVertical: 16,\n    paddingHorizontal: 20,\n    borderRadius: 5,\n    backgroundColor: COLORS.GREY_030,\n    marginBottom: 12,\n    fontSize: 16,\n    borderColor: 'transparent',\n  },\n  eyeIconContainer: {\n    position: 'absolute',\n    right: 15,\n    top: 15,\n  },\n  hintText: {\n    color: COLORS.THEME_PRIMARY,\n    fontFamily: 'Pretendard',\n    fontSize: 12,\n    paddingLeft: 12,\n  },\n  errorText: {\n    color: COLORS.THEME_NEGATIVE,\n    fontFamily: 'Pretendard',\n    fontSize: 12,\n    paddingLeft: 12,\n  },\n  eyeIcon: {\n    height: 24,\n    width: 24,\n  },\n});\n\nfunction PasswordInputScreen({ navigation }: PasswordInputScreenProp) {\n  const [password, setPassword] = useState('');\n  const [password2, setPassword2] = useState('');\n  const [isPasswordValidate, setIsPasswordValidate] = useState(false);\n  const [isPasswordSame, setIsPasswordSame] = useState(false);\n  const [isPasswordVisible, setIsPasswordVisible] = useState(true);\n  const [isPassword2Visible, setIsPassword2Visible] = useState(true);\n\n  useEffect(() => {\n    setIsPasswordValidate(validatePassword(password));\n  }, [password]);\n\n  useEffect(() => {\n    setIsPasswordSame(password === password2 && password !== '');\n  }, [password2, password]);\n\n  return (\n    <SafeAreaView style={commonStyles.container}>\n      <ButtonBack onPress={() => navigation.goBack()} />\n      <View style={commonStyles.titleWrapper}>\n        <Text style={commonStyles.title}>비밀번호 설정하세요</Text>\n      </View>\n      <View>\n        <TextInput\n          value={password}\n          onChangeText={(text) => setPassword(text)}\n          style={styles.textInput}\n          placeholder=\"비밀번호 설정\"\n          secureTextEntry={isPasswordVisible}\n          placeholderTextColor={COLORS.TEXT_DISABLED_GREY}\n          keyboardType=\"default\"\n          autoFocus\n        />\n        <TouchableOpacity\n          onPress={() => setIsPasswordVisible((prev) => !prev)}\n          style={styles.eyeIconContainer}\n        >\n          <Image\n            source={\n              isPasswordVisible ? icPasswordVisibleFalse : icPasswordVisibleTrue\n            }\n            style={styles.eyeIcon}\n          />\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput\n          value={password2}\n          onChangeText={(text) => setPassword2(text)}\n          style={styles.textInput}\n          placeholder=\"비밀번호 다시 입력\"\n          secureTextEntry={isPassword2Visible}\n          placeholderTextColor={COLORS.TEXT_DISABLED_GREY}\n          keyboardType=\"default\"\n        />\n        <TouchableOpacity\n          onPress={() => setIsPassword2Visible((prev) => !prev)}\n          style={styles.eyeIconContainer}\n        >\n          <Image\n            source={\n              isPassword2Visible\n                ? icPasswordVisibleFalse\n                : icPasswordVisibleTrue\n            }\n            style={styles.eyeIcon}\n          />\n        </TouchableOpacity>\n      </View>\n\n      {isPasswordSame || password2.length === 0 ? (\n        <Text style={styles.hintText}>\n          영문 대문자/소문자/숫자 3가지를 포함하여 입력하세요\n        </Text>\n      ) : (\n        <Text style={styles.errorText}>\n          비밀번호가 일치하지 않아요. 다시 입력하세요.\n        </Text>\n      )}\n      <View style={{ marginTop: 22 }}>\n        <ButtonNext\n          onPress={() => navigation.navigate('NicknameInput')}\n          isActivated={isPasswordValidate && isPasswordSame}\n        />\n      </View>\n    </SafeAreaView>\n  );\n}\n\nexport default PasswordInputScreen;\n"]},"metadata":{},"sourceType":"module"}